/*
 * CloudFabrix RDA Platform API
 * CloudFabrix RDA Platform API
 *
 * The version of the OpenAPI document: 3.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response for isUserAuthenticated request. This response contains all the user information that is currently logged in.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-08T16:25:40.429196Z[Etc/UTC]")
public class UserDetails {
  public static final String SERIALIZED_NAME_AUTHENTICATED = "authenticated";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATED)
  private Boolean authenticated;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_AUTHENTICATED = "is_authenticated";
  @SerializedName(SERIALIZED_NAME_IS_AUTHENTICATED)
  private Boolean isAuthenticated;

  public static final String SERIALIZED_NAME_IS_WORKSPACEADMIN = "is_workspaceadmin";
  @SerializedName(SERIALIZED_NAME_IS_WORKSPACEADMIN)
  private Boolean isWorkspaceadmin;

  public static final String SERIALIZED_NAME_IS_WORKSPACECREATOR = "is_workspacecreator";
  @SerializedName(SERIALIZED_NAME_IS_WORKSPACECREATOR)
  private Boolean isWorkspacecreator;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private Boolean lastName;

  public static final String SERIALIZED_NAME_LASTNAME = "lastname";
  @SerializedName(SERIALIZED_NAME_LASTNAME)
  private Boolean lastname;

  public static final String SERIALIZED_NAME_LOGIN_TIME = "login_time";
  @SerializedName(SERIALIZED_NAME_LOGIN_TIME)
  private String loginTime;

  public static final String SERIALIZED_NAME_RDAC_AUTH_TOKEN = "rdac_auth_token";
  @SerializedName(SERIALIZED_NAME_RDAC_AUTH_TOKEN)
  private String rdacAuthToken;

  public static final String SERIALIZED_NAME_REMOTE_USER = "remote_user";
  @SerializedName(SERIALIZED_NAME_REMOTE_USER)
  private Boolean remoteUser;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_SESSION_ID = "session_id";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TENANTID = "tenantid";
  @SerializedName(SERIALIZED_NAME_TENANTID)
  private String tenantid;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_WORKSPACE = "workspace";
  @SerializedName(SERIALIZED_NAME_WORKSPACE)
  private String workspace;

  public static final String SERIALIZED_NAME_WORKSPACEID = "workspaceid";
  @SerializedName(SERIALIZED_NAME_WORKSPACEID)
  private String workspaceid;

  public UserDetails() {
  }

  public UserDetails authenticated(Boolean authenticated) {
    
    this.authenticated = authenticated;
    return this;
  }

   /**
   * Whether user is authenticated
   * @return authenticated
  **/
  @javax.annotation.Nullable
  public Boolean getAuthenticated() {
    return authenticated;
  }


  public void setAuthenticated(Boolean authenticated) {
    this.authenticated = authenticated;
  }


  public UserDetails company(String company) {
    
    this.company = company;
    return this;
  }

   /**
   * Company the user belongs to
   * @return company
  **/
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }


  public void setCompany(String company) {
    this.company = company;
  }


  public UserDetails firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First name
   * @return firstName
  **/
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public UserDetails id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Id of the user (email address)
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public UserDetails isAuthenticated(Boolean isAuthenticated) {
    
    this.isAuthenticated = isAuthenticated;
    return this;
  }

   /**
   * Alias to &#39;authenticated&#39;
   * @return isAuthenticated
  **/
  @javax.annotation.Nullable
  public Boolean getIsAuthenticated() {
    return isAuthenticated;
  }


  public void setIsAuthenticated(Boolean isAuthenticated) {
    this.isAuthenticated = isAuthenticated;
  }


  public UserDetails isWorkspaceadmin(Boolean isWorkspaceadmin) {
    
    this.isWorkspaceadmin = isWorkspaceadmin;
    return this;
  }

   /**
   * Is the user a workspace admin
   * @return isWorkspaceadmin
  **/
  @javax.annotation.Nullable
  public Boolean getIsWorkspaceadmin() {
    return isWorkspaceadmin;
  }


  public void setIsWorkspaceadmin(Boolean isWorkspaceadmin) {
    this.isWorkspaceadmin = isWorkspaceadmin;
  }


  public UserDetails isWorkspacecreator(Boolean isWorkspacecreator) {
    
    this.isWorkspacecreator = isWorkspacecreator;
    return this;
  }

   /**
   * Is the user a workspace creator
   * @return isWorkspacecreator
  **/
  @javax.annotation.Nullable
  public Boolean getIsWorkspacecreator() {
    return isWorkspacecreator;
  }


  public void setIsWorkspacecreator(Boolean isWorkspacecreator) {
    this.isWorkspacecreator = isWorkspacecreator;
  }


  public UserDetails lastName(Boolean lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last Name
   * @return lastName
  **/
  @javax.annotation.Nullable
  public Boolean getLastName() {
    return lastName;
  }


  public void setLastName(Boolean lastName) {
    this.lastName = lastName;
  }


  public UserDetails lastname(Boolean lastname) {
    
    this.lastname = lastname;
    return this;
  }

   /**
   * Alias to last_name
   * @return lastname
  **/
  @javax.annotation.Nullable
  public Boolean getLastname() {
    return lastname;
  }


  public void setLastname(Boolean lastname) {
    this.lastname = lastname;
  }


  public UserDetails loginTime(String loginTime) {
    
    this.loginTime = loginTime;
    return this;
  }

   /**
   * Login time in ISO format
   * @return loginTime
  **/
  @javax.annotation.Nullable
  public String getLoginTime() {
    return loginTime;
  }


  public void setLoginTime(String loginTime) {
    this.loginTime = loginTime;
  }


  public UserDetails rdacAuthToken(String rdacAuthToken) {
    
    this.rdacAuthToken = rdacAuthToken;
    return this;
  }

   /**
   * Authentication Token
   * @return rdacAuthToken
  **/
  @javax.annotation.Nullable
  public String getRdacAuthToken() {
    return rdacAuthToken;
  }


  public void setRdacAuthToken(String rdacAuthToken) {
    this.rdacAuthToken = rdacAuthToken;
  }


  public UserDetails remoteUser(Boolean remoteUser) {
    
    this.remoteUser = remoteUser;
    return this;
  }

   /**
   * Whether user is a remote user or a local user
   * @return remoteUser
  **/
  @javax.annotation.Nullable
  public Boolean getRemoteUser() {
    return remoteUser;
  }


  public void setRemoteUser(Boolean remoteUser) {
    this.remoteUser = remoteUser;
  }


  public UserDetails role(String role) {
    
    this.role = role;
    return this;
  }

   /**
   * User Role
   * @return role
  **/
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }


  public void setRole(String role) {
    this.role = role;
  }


  public UserDetails sessionId(String sessionId) {
    
    this.sessionId = sessionId;
    return this;
  }

   /**
   * Current session id
   * @return sessionId
  **/
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }


  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public UserDetails status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Current status of the user
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public UserDetails tenantid(String tenantid) {
    
    this.tenantid = tenantid;
    return this;
  }

   /**
   * Tenant ID of the user
   * @return tenantid
  **/
  @javax.annotation.Nullable
  public String getTenantid() {
    return tenantid;
  }


  public void setTenantid(String tenantid) {
    this.tenantid = tenantid;
  }


  public UserDetails user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * alias to &#39;id&#39;
   * @return user
  **/
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }


  public UserDetails workspace(String workspace) {
    
    this.workspace = workspace;
    return this;
  }

   /**
   * Name of the workspace
   * @return workspace
  **/
  @javax.annotation.Nullable
  public String getWorkspace() {
    return workspace;
  }


  public void setWorkspace(String workspace) {
    this.workspace = workspace;
  }


  public UserDetails workspaceid(String workspaceid) {
    
    this.workspaceid = workspaceid;
    return this;
  }

   /**
   * ID of the workspace
   * @return workspaceid
  **/
  @javax.annotation.Nullable
  public String getWorkspaceid() {
    return workspaceid;
  }


  public void setWorkspaceid(String workspaceid) {
    this.workspaceid = workspaceid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserDetails userDetails = (UserDetails) o;
    return Objects.equals(this.authenticated, userDetails.authenticated) &&
        Objects.equals(this.company, userDetails.company) &&
        Objects.equals(this.firstName, userDetails.firstName) &&
        Objects.equals(this.id, userDetails.id) &&
        Objects.equals(this.isAuthenticated, userDetails.isAuthenticated) &&
        Objects.equals(this.isWorkspaceadmin, userDetails.isWorkspaceadmin) &&
        Objects.equals(this.isWorkspacecreator, userDetails.isWorkspacecreator) &&
        Objects.equals(this.lastName, userDetails.lastName) &&
        Objects.equals(this.lastname, userDetails.lastname) &&
        Objects.equals(this.loginTime, userDetails.loginTime) &&
        Objects.equals(this.rdacAuthToken, userDetails.rdacAuthToken) &&
        Objects.equals(this.remoteUser, userDetails.remoteUser) &&
        Objects.equals(this.role, userDetails.role) &&
        Objects.equals(this.sessionId, userDetails.sessionId) &&
        Objects.equals(this.status, userDetails.status) &&
        Objects.equals(this.tenantid, userDetails.tenantid) &&
        Objects.equals(this.user, userDetails.user) &&
        Objects.equals(this.workspace, userDetails.workspace) &&
        Objects.equals(this.workspaceid, userDetails.workspaceid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticated, company, firstName, id, isAuthenticated, isWorkspaceadmin, isWorkspacecreator, lastName, lastname, loginTime, rdacAuthToken, remoteUser, role, sessionId, status, tenantid, user, workspace, workspaceid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserDetails {\n");
    sb.append("    authenticated: ").append(toIndentedString(authenticated)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isAuthenticated: ").append(toIndentedString(isAuthenticated)).append("\n");
    sb.append("    isWorkspaceadmin: ").append(toIndentedString(isWorkspaceadmin)).append("\n");
    sb.append("    isWorkspacecreator: ").append(toIndentedString(isWorkspacecreator)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    loginTime: ").append(toIndentedString(loginTime)).append("\n");
    sb.append("    rdacAuthToken: ").append(toIndentedString(rdacAuthToken)).append("\n");
    sb.append("    remoteUser: ").append(toIndentedString(remoteUser)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tenantid: ").append(toIndentedString(tenantid)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    workspace: ").append(toIndentedString(workspace)).append("\n");
    sb.append("    workspaceid: ").append(toIndentedString(workspaceid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticated");
    openapiFields.add("company");
    openapiFields.add("first_name");
    openapiFields.add("id");
    openapiFields.add("is_authenticated");
    openapiFields.add("is_workspaceadmin");
    openapiFields.add("is_workspacecreator");
    openapiFields.add("last_name");
    openapiFields.add("lastname");
    openapiFields.add("login_time");
    openapiFields.add("rdac_auth_token");
    openapiFields.add("remote_user");
    openapiFields.add("role");
    openapiFields.add("session_id");
    openapiFields.add("status");
    openapiFields.add("tenantid");
    openapiFields.add("user");
    openapiFields.add("workspace");
    openapiFields.add("workspaceid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserDetails is not found in the empty JSON string", UserDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UserDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserDetails` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("login_time") != null && !jsonObj.get("login_time").isJsonNull()) && !jsonObj.get("login_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login_time").toString()));
      }
      if ((jsonObj.get("rdac_auth_token") != null && !jsonObj.get("rdac_auth_token").isJsonNull()) && !jsonObj.get("rdac_auth_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdac_auth_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdac_auth_token").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if ((jsonObj.get("session_id") != null && !jsonObj.get("session_id").isJsonNull()) && !jsonObj.get("session_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("tenantid") != null && !jsonObj.get("tenantid").isJsonNull()) && !jsonObj.get("tenantid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantid").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if ((jsonObj.get("workspace") != null && !jsonObj.get("workspace").isJsonNull()) && !jsonObj.get("workspace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspace").toString()));
      }
      if ((jsonObj.get("workspaceid") != null && !jsonObj.get("workspaceid").isJsonNull()) && !jsonObj.get("workspaceid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<UserDetails>() {
           @Override
           public void write(JsonWriter out, UserDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserDetails read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserDetails
  * @throws IOException if the JSON string is invalid with respect to UserDetails
  */
  public static UserDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserDetails.class);
  }

 /**
  * Convert an instance of UserDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

