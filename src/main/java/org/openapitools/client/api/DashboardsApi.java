/*
 * CloudFabrix RDA Platform API
 * CloudFabrix RDA Platform API
 *
 * The version of the OpenAPI document: 3.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DashboardsEnum;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.TableReportResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DashboardsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DashboardsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DashboardsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDashboards
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;, &#39;description&#39;, &#39;usecase&#39;, &#39;category&#39;, &#39;version&#39;] (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param sort Sort the output based on given fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsCall(String cfxqlQuery, String search, Integer offset, Integer limit, List<DashboardsEnum> sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/dashboards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cfxqlQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cfxql_query", cfxqlQuery));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDashboardsValidateBeforeCall(String cfxqlQuery, String search, Integer offset, Integer limit, List<DashboardsEnum> sort, final ApiCallback _callback) throws ApiException {
        return getDashboardsCall(cfxqlQuery, search, offset, limit, sort, _callback);

    }

    /**
     * Fetch meta data for dashboards
     * Fetch meta data for dashboards
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;, &#39;description&#39;, &#39;usecase&#39;, &#39;category&#39;, &#39;version&#39;] (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param sort Sort the output based on given fields (optional)
     * @return TableReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public TableReportResponse getDashboards(String cfxqlQuery, String search, Integer offset, Integer limit, List<DashboardsEnum> sort) throws ApiException {
        ApiResponse<TableReportResponse> localVarResp = getDashboardsWithHttpInfo(cfxqlQuery, search, offset, limit, sort);
        return localVarResp.getData();
    }

    /**
     * Fetch meta data for dashboards
     * Fetch meta data for dashboards
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;, &#39;description&#39;, &#39;usecase&#39;, &#39;category&#39;, &#39;version&#39;] (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param sort Sort the output based on given fields (optional)
     * @return ApiResponse&lt;TableReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableReportResponse> getDashboardsWithHttpInfo(String cfxqlQuery, String search, Integer offset, Integer limit, List<DashboardsEnum> sort) throws ApiException {
        okhttp3.Call localVarCall = getDashboardsValidateBeforeCall(cfxqlQuery, search, offset, limit, sort, null);
        Type localVarReturnType = new TypeToken<TableReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch meta data for dashboards (asynchronously)
     * Fetch meta data for dashboards
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;, &#39;description&#39;, &#39;usecase&#39;, &#39;category&#39;, &#39;version&#39;] (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param sort Sort the output based on given fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDashboardsAsync(String cfxqlQuery, String search, Integer offset, Integer limit, List<DashboardsEnum> sort, final ApiCallback<TableReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDashboardsValidateBeforeCall(cfxqlQuery, search, offset, limit, sort, _callback);
        Type localVarReturnType = new TypeToken<TableReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
