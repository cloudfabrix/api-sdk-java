/*
 * CloudFabrix RDA Platform API
 * CloudFabrix RDA Platform API
 *
 * The version of the OpenAPI document: 3.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DatasetAddModel;
import org.openapitools.client.model.DatasetsEnum;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.TableReportResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatasetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatasetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatasetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addDataset
     * @param datasetAddModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDatasetCall(DatasetAddModel datasetAddModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datasetAddModel;

        // create path and map variables
        String localVarPath = "/api/v2/datasets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDatasetValidateBeforeCall(DatasetAddModel datasetAddModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetAddModel' is set
        if (datasetAddModel == null) {
            throw new ApiException("Missing the required parameter 'datasetAddModel' when calling addDataset(Async)");
        }

        return addDatasetCall(datasetAddModel, _callback);

    }

    /**
     * Add a dataset
     * Add a dataset.
     * @param datasetAddModel  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object addDataset(DatasetAddModel datasetAddModel) throws ApiException {
        ApiResponse<Object> localVarResp = addDatasetWithHttpInfo(datasetAddModel);
        return localVarResp.getData();
    }

    /**
     * Add a dataset
     * Add a dataset.
     * @param datasetAddModel  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addDatasetWithHttpInfo(DatasetAddModel datasetAddModel) throws ApiException {
        okhttp3.Call localVarCall = addDatasetValidateBeforeCall(datasetAddModel, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a dataset (asynchronously)
     * Add a dataset.
     * @param datasetAddModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDatasetAsync(DatasetAddModel datasetAddModel, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDatasetValidateBeforeCall(datasetAddModel, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDataset
     * @param name Dataset name to be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasetCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/datasets/dataset/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDatasetValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDataset(Async)");
        }

        return deleteDatasetCall(name, _callback);

    }

    /**
     * Delete a dataset
     * Delete a dataset. Please note that all the data of the dataset will be deleted and can not be undone.
     * @param name Dataset name to be deleted. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteDataset(String name) throws ApiException {
        ApiResponse<Object> localVarResp = deleteDatasetWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Delete a dataset
     * Delete a dataset. Please note that all the data of the dataset will be deleted and can not be undone.
     * @param name Dataset name to be deleted. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteDatasetWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = deleteDatasetValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a dataset (asynchronously)
     * Delete a dataset. Please note that all the data of the dataset will be deleted and can not be undone.
     * @param name Dataset name to be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasetAsync(String name, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDatasetValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDatasetAllData
     * @param name Name of the dataset (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasetAllDataCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/datasets/dataset/{name}/data/all"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDatasetAllDataValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDatasetAllData(Async)");
        }

        return deleteDatasetAllDataCall(name, _callback);

    }

    /**
     * Delete enitre data of a dataset
     * Delete entire data of a dataset
     * @param name Name of the dataset (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteDatasetAllData(String name) throws ApiException {
        ApiResponse<Object> localVarResp = deleteDatasetAllDataWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Delete enitre data of a dataset
     * Delete entire data of a dataset
     * @param name Name of the dataset (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteDatasetAllDataWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = deleteDatasetAllDataValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete enitre data of a dataset (asynchronously)
     * Delete entire data of a dataset
     * @param name Name of the dataset (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasetAllDataAsync(String name, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDatasetAllDataValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDatasetRows
     * @param name Name of the dataset (required)
     * @param keys Array of keys to match for updating rows (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasetRowsCall(String name, List<String> keys, List<Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v2/datasets/dataset/{name}/data"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keys", keys));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDatasetRowsValidateBeforeCall(String name, List<String> keys, List<Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDatasetRows(Async)");
        }

        // verify the required parameter 'keys' is set
        if (keys == null) {
            throw new ApiException("Missing the required parameter 'keys' when calling deleteDatasetRows(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling deleteDatasetRows(Async)");
        }

        return deleteDatasetRowsCall(name, keys, requestBody, _callback);

    }

    /**
     * Delete matching dataset rows
     * Delete dataset rows matching the input data     All the rows in existing dataset that match all the keys in input data are deleted.     NOTE: This directly updates the dataset and all drafts are removed.
     * @param name Name of the dataset (required)
     * @param keys Array of keys to match for updating rows (required)
     * @param requestBody  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteDatasetRows(String name, List<String> keys, List<Object> requestBody) throws ApiException {
        ApiResponse<Object> localVarResp = deleteDatasetRowsWithHttpInfo(name, keys, requestBody);
        return localVarResp.getData();
    }

    /**
     * Delete matching dataset rows
     * Delete dataset rows matching the input data     All the rows in existing dataset that match all the keys in input data are deleted.     NOTE: This directly updates the dataset and all drafts are removed.
     * @param name Name of the dataset (required)
     * @param keys Array of keys to match for updating rows (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteDatasetRowsWithHttpInfo(String name, List<String> keys, List<Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteDatasetRowsValidateBeforeCall(name, keys, requestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete matching dataset rows (asynchronously)
     * Delete dataset rows matching the input data     All the rows in existing dataset that match all the keys in input data are deleted.     NOTE: This directly updates the dataset and all drafts are removed.
     * @param name Name of the dataset (required)
     * @param keys Array of keys to match for updating rows (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasetRowsAsync(String name, List<String> keys, List<Object> requestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDatasetRowsValidateBeforeCall(name, keys, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasetData
     * @param name Name of the dataset (required)
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;] (optional)
     * @param sort Sort the output based on given fields. Prepend &#39;-&#39; to sort descending (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetDataCall(String name, String cfxqlQuery, String search, List<String> sort, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/datasets/dataset/{name}/data"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cfxqlQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cfxql_query", cfxqlQuery));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasetDataValidateBeforeCall(String name, String cfxqlQuery, String search, List<String> sort, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDatasetData(Async)");
        }

        return getDatasetDataCall(name, cfxqlQuery, search, sort, offset, limit, _callback);

    }

    /**
     * Get data of a dataset
     * Get data of a dataset
     * @param name Name of the dataset (required)
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;] (optional)
     * @param sort Sort the output based on given fields. Prepend &#39;-&#39; to sort descending (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @return TableReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public TableReportResponse getDatasetData(String name, String cfxqlQuery, String search, List<String> sort, Integer offset, Integer limit) throws ApiException {
        ApiResponse<TableReportResponse> localVarResp = getDatasetDataWithHttpInfo(name, cfxqlQuery, search, sort, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get data of a dataset
     * Get data of a dataset
     * @param name Name of the dataset (required)
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;] (optional)
     * @param sort Sort the output based on given fields. Prepend &#39;-&#39; to sort descending (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @return ApiResponse&lt;TableReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableReportResponse> getDatasetDataWithHttpInfo(String name, String cfxqlQuery, String search, List<String> sort, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getDatasetDataValidateBeforeCall(name, cfxqlQuery, search, sort, offset, limit, null);
        Type localVarReturnType = new TypeToken<TableReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get data of a dataset (asynchronously)
     * Get data of a dataset
     * @param name Name of the dataset (required)
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;] (optional)
     * @param sort Sort the output based on given fields. Prepend &#39;-&#39; to sort descending (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetDataAsync(String name, String cfxqlQuery, String search, List<String> sort, Integer offset, Integer limit, final ApiCallback<TableReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasetDataValidateBeforeCall(name, cfxqlQuery, search, sort, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<TableReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasets
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;, &#39;schema&#39;] (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param sort Sort the output based on given fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetsCall(String cfxqlQuery, String search, Integer offset, Integer limit, List<DatasetsEnum> sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/datasets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cfxqlQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cfxql_query", cfxqlQuery));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasetsValidateBeforeCall(String cfxqlQuery, String search, Integer offset, Integer limit, List<DatasetsEnum> sort, final ApiCallback _callback) throws ApiException {
        return getDatasetsCall(cfxqlQuery, search, offset, limit, sort, _callback);

    }

    /**
     * Fetch meta data about datasets
     * Fetch meta data about datasets
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;, &#39;schema&#39;] (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param sort Sort the output based on given fields (optional)
     * @return TableReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public TableReportResponse getDatasets(String cfxqlQuery, String search, Integer offset, Integer limit, List<DatasetsEnum> sort) throws ApiException {
        ApiResponse<TableReportResponse> localVarResp = getDatasetsWithHttpInfo(cfxqlQuery, search, offset, limit, sort);
        return localVarResp.getData();
    }

    /**
     * Fetch meta data about datasets
     * Fetch meta data about datasets
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;, &#39;schema&#39;] (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param sort Sort the output based on given fields (optional)
     * @return ApiResponse&lt;TableReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableReportResponse> getDatasetsWithHttpInfo(String cfxqlQuery, String search, Integer offset, Integer limit, List<DatasetsEnum> sort) throws ApiException {
        okhttp3.Call localVarCall = getDatasetsValidateBeforeCall(cfxqlQuery, search, offset, limit, sort, null);
        Type localVarReturnType = new TypeToken<TableReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch meta data about datasets (asynchronously)
     * Fetch meta data about datasets
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;, &#39;schema&#39;] (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param sort Sort the output based on given fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetsAsync(String cfxqlQuery, String search, Integer offset, Integer limit, List<DatasetsEnum> sort, final ApiCallback<TableReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasetsValidateBeforeCall(cfxqlQuery, search, offset, limit, sort, _callback);
        Type localVarReturnType = new TypeToken<TableReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDatasetData
     * @param name Name of the dataset (required)
     * @param requestBody  (required)
     * @param replace If set to true, replace the existing data with new data (optional, default to false)
     * @param keys Array of keys to match for updating rows (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasetDataCall(String name, List<Object> requestBody, Boolean replace, List<String> keys, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v2/datasets/dataset/{name}/data"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("replace", replace));
        }

        if (keys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keys", keys));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDatasetDataValidateBeforeCall(String name, List<Object> requestBody, Boolean replace, List<String> keys, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateDatasetData(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateDatasetData(Async)");
        }

        return updateDatasetDataCall(name, requestBody, replace, keys, _callback);

    }

    /**
     * Update rows of a dataset
     * Update (merge or replace) existing dataset data.     This function currently does not support deleting rows.&lt;br/&gt;     If replace is true, entire existing dataset data is replaced with the new data in input.&lt;br/&gt;     If replace is false, &lt;br/&gt;     &lt;ul&gt;         &lt;li&gt;If keys are not given, the input data is appened to the existing dataset.         &lt;li&gt;If keys are given then the following flow explains the operation&lt;br/&gt;             For each row in the input data:             &lt;ul&gt;                 &lt;li&gt;The rows with same values for all the keys are replaced with input row.                 &lt;li&gt;Other rows are appended to the existing dataset             &lt;/ul&gt;         Error raised when:             &lt;ul&gt;                 &lt;li&gt;If there are duplicate rows in input data with same key values                 &lt;li&gt;If any key passed in keys is not present as a column in the input data             &lt;/ul&gt;     &lt;/ul&gt;     NOTE: This directly updates the dataset and all drafts are removed.
     * @param name Name of the dataset (required)
     * @param requestBody  (required)
     * @param replace If set to true, replace the existing data with new data (optional, default to false)
     * @param keys Array of keys to match for updating rows (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDatasetData(String name, List<Object> requestBody, Boolean replace, List<String> keys) throws ApiException {
        ApiResponse<Object> localVarResp = updateDatasetDataWithHttpInfo(name, requestBody, replace, keys);
        return localVarResp.getData();
    }

    /**
     * Update rows of a dataset
     * Update (merge or replace) existing dataset data.     This function currently does not support deleting rows.&lt;br/&gt;     If replace is true, entire existing dataset data is replaced with the new data in input.&lt;br/&gt;     If replace is false, &lt;br/&gt;     &lt;ul&gt;         &lt;li&gt;If keys are not given, the input data is appened to the existing dataset.         &lt;li&gt;If keys are given then the following flow explains the operation&lt;br/&gt;             For each row in the input data:             &lt;ul&gt;                 &lt;li&gt;The rows with same values for all the keys are replaced with input row.                 &lt;li&gt;Other rows are appended to the existing dataset             &lt;/ul&gt;         Error raised when:             &lt;ul&gt;                 &lt;li&gt;If there are duplicate rows in input data with same key values                 &lt;li&gt;If any key passed in keys is not present as a column in the input data             &lt;/ul&gt;     &lt;/ul&gt;     NOTE: This directly updates the dataset and all drafts are removed.
     * @param name Name of the dataset (required)
     * @param requestBody  (required)
     * @param replace If set to true, replace the existing data with new data (optional, default to false)
     * @param keys Array of keys to match for updating rows (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDatasetDataWithHttpInfo(String name, List<Object> requestBody, Boolean replace, List<String> keys) throws ApiException {
        okhttp3.Call localVarCall = updateDatasetDataValidateBeforeCall(name, requestBody, replace, keys, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update rows of a dataset (asynchronously)
     * Update (merge or replace) existing dataset data.     This function currently does not support deleting rows.&lt;br/&gt;     If replace is true, entire existing dataset data is replaced with the new data in input.&lt;br/&gt;     If replace is false, &lt;br/&gt;     &lt;ul&gt;         &lt;li&gt;If keys are not given, the input data is appened to the existing dataset.         &lt;li&gt;If keys are given then the following flow explains the operation&lt;br/&gt;             For each row in the input data:             &lt;ul&gt;                 &lt;li&gt;The rows with same values for all the keys are replaced with input row.                 &lt;li&gt;Other rows are appended to the existing dataset             &lt;/ul&gt;         Error raised when:             &lt;ul&gt;                 &lt;li&gt;If there are duplicate rows in input data with same key values                 &lt;li&gt;If any key passed in keys is not present as a column in the input data             &lt;/ul&gt;     &lt;/ul&gt;     NOTE: This directly updates the dataset and all drafts are removed.
     * @param name Name of the dataset (required)
     * @param requestBody  (required)
     * @param replace If set to true, replace the existing data with new data (optional, default to false)
     * @param keys Array of keys to match for updating rows (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasetDataAsync(String name, List<Object> requestBody, Boolean replace, List<String> keys, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDatasetDataValidateBeforeCall(name, requestBody, replace, keys, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
