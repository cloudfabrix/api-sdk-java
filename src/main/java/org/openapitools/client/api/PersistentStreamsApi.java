/*
 * CloudFabrix RDA Platform API
 * CloudFabrix RDA Platform API
 *
 * The version of the OpenAPI document: 3.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.PstreamAddModel;
import org.openapitools.client.model.PstreamEditModel;
import org.openapitools.client.model.PstreamsEnum;
import org.openapitools.client.model.TableReportResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersistentStreamsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PersistentStreamsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PersistentStreamsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addPstream
     * @param pstreamAddModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPstreamCall(PstreamAddModel pstreamAddModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pstreamAddModel;

        // create path and map variables
        String localVarPath = "/api/v2/pstreams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPstreamValidateBeforeCall(PstreamAddModel pstreamAddModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pstreamAddModel' is set
        if (pstreamAddModel == null) {
            throw new ApiException("Missing the required parameter 'pstreamAddModel' when calling addPstream(Async)");
        }

        return addPstreamCall(pstreamAddModel, _callback);

    }

    /**
     * Add a pstream
     * Add a new pstream to the system
     * @param pstreamAddModel  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object addPstream(PstreamAddModel pstreamAddModel) throws ApiException {
        ApiResponse<Object> localVarResp = addPstreamWithHttpInfo(pstreamAddModel);
        return localVarResp.getData();
    }

    /**
     * Add a pstream
     * Add a new pstream to the system
     * @param pstreamAddModel  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addPstreamWithHttpInfo(PstreamAddModel pstreamAddModel) throws ApiException {
        okhttp3.Call localVarCall = addPstreamValidateBeforeCall(pstreamAddModel, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a pstream (asynchronously)
     * Add a new pstream to the system
     * @param pstreamAddModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPstreamAsync(PstreamAddModel pstreamAddModel, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPstreamValidateBeforeCall(pstreamAddModel, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePstream
     * @param name Name of the pstream to be deleted (required)
     * @param deleteData Delete data as well. If data is not deleted, adding the same pstream again will add the old data back. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePstreamCall(String name, Boolean deleteData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/pstreams/pstream/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleteData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delete_data", deleteData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePstreamValidateBeforeCall(String name, Boolean deleteData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deletePstream(Async)");
        }

        return deletePstreamCall(name, deleteData, _callback);

    }

    /**
     * Delete a pstream.
     * Delete a persistent stream.
     * @param name Name of the pstream to be deleted (required)
     * @param deleteData Delete data as well. If data is not deleted, adding the same pstream again will add the old data back. (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deletePstream(String name, Boolean deleteData) throws ApiException {
        ApiResponse<Object> localVarResp = deletePstreamWithHttpInfo(name, deleteData);
        return localVarResp.getData();
    }

    /**
     * Delete a pstream.
     * Delete a persistent stream.
     * @param name Name of the pstream to be deleted (required)
     * @param deleteData Delete data as well. If data is not deleted, adding the same pstream again will add the old data back. (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deletePstreamWithHttpInfo(String name, Boolean deleteData) throws ApiException {
        okhttp3.Call localVarCall = deletePstreamValidateBeforeCall(name, deleteData, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a pstream. (asynchronously)
     * Delete a persistent stream.
     * @param name Name of the pstream to be deleted (required)
     * @param deleteData Delete data as well. If data is not deleted, adding the same pstream again will add the old data back. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePstreamAsync(String name, Boolean deleteData, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePstreamValidateBeforeCall(name, deleteData, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editPstream
     * @param name Name of the pstream to be edited (required)
     * @param pstreamEditModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editPstreamCall(String name, PstreamEditModel pstreamEditModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pstreamEditModel;

        // create path and map variables
        String localVarPath = "/api/v2/pstreams/pstream/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editPstreamValidateBeforeCall(String name, PstreamEditModel pstreamEditModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling editPstream(Async)");
        }

        // verify the required parameter 'pstreamEditModel' is set
        if (pstreamEditModel == null) {
            throw new ApiException("Missing the required parameter 'pstreamEditModel' when calling editPstream(Async)");
        }

        return editPstreamCall(name, pstreamEditModel, _callback);

    }

    /**
     * Edit attributes of a pstream
     * Edit the attributes of a persistent stream
     * @param name Name of the pstream to be edited (required)
     * @param pstreamEditModel  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object editPstream(String name, PstreamEditModel pstreamEditModel) throws ApiException {
        ApiResponse<Object> localVarResp = editPstreamWithHttpInfo(name, pstreamEditModel);
        return localVarResp.getData();
    }

    /**
     * Edit attributes of a pstream
     * Edit the attributes of a persistent stream
     * @param name Name of the pstream to be edited (required)
     * @param pstreamEditModel  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> editPstreamWithHttpInfo(String name, PstreamEditModel pstreamEditModel) throws ApiException {
        okhttp3.Call localVarCall = editPstreamValidateBeforeCall(name, pstreamEditModel, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit attributes of a pstream (asynchronously)
     * Edit the attributes of a persistent stream
     * @param name Name of the pstream to be edited (required)
     * @param pstreamEditModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editPstreamAsync(String name, PstreamEditModel pstreamEditModel, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = editPstreamValidateBeforeCall(name, pstreamEditModel, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPstreamData
     * @param name Name of the pstream (required)
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;] (optional)
     * @param sort Sort the output based on given fields. Prepend &#39;-&#39; to sort descending (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPstreamDataCall(String name, String cfxqlQuery, String search, List<String> sort, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/pstreams/pstream/{name}/data"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cfxqlQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cfxql_query", cfxqlQuery));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPstreamDataValidateBeforeCall(String name, String cfxqlQuery, String search, List<String> sort, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPstreamData(Async)");
        }

        return getPstreamDataCall(name, cfxqlQuery, search, sort, offset, limit, _callback);

    }

    /**
     * Get data of a pstream
     * Get data of a persistent stream
     * @param name Name of the pstream (required)
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;] (optional)
     * @param sort Sort the output based on given fields. Prepend &#39;-&#39; to sort descending (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @return TableReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public TableReportResponse getPstreamData(String name, String cfxqlQuery, String search, List<String> sort, Integer offset, Integer limit) throws ApiException {
        ApiResponse<TableReportResponse> localVarResp = getPstreamDataWithHttpInfo(name, cfxqlQuery, search, sort, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get data of a pstream
     * Get data of a persistent stream
     * @param name Name of the pstream (required)
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;] (optional)
     * @param sort Sort the output based on given fields. Prepend &#39;-&#39; to sort descending (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @return ApiResponse&lt;TableReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableReportResponse> getPstreamDataWithHttpInfo(String name, String cfxqlQuery, String search, List<String> sort, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPstreamDataValidateBeforeCall(name, cfxqlQuery, search, sort, offset, limit, null);
        Type localVarReturnType = new TypeToken<TableReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get data of a pstream (asynchronously)
     * Get data of a persistent stream
     * @param name Name of the pstream (required)
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;] (optional)
     * @param sort Sort the output based on given fields. Prepend &#39;-&#39; to sort descending (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPstreamDataAsync(String name, String cfxqlQuery, String search, List<String> sort, Integer offset, Integer limit, final ApiCallback<TableReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPstreamDataValidateBeforeCall(name, cfxqlQuery, search, sort, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<TableReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPstreams
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;] (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param sort Sort the output based on given fields (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPstreamsCall(String cfxqlQuery, String search, Integer offset, Integer limit, List<PstreamsEnum> sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/pstreams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cfxqlQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cfxql_query", cfxqlQuery));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPstreamsValidateBeforeCall(String cfxqlQuery, String search, Integer offset, Integer limit, List<PstreamsEnum> sort, final ApiCallback _callback) throws ApiException {
        return getPstreamsCall(cfxqlQuery, search, offset, limit, sort, _callback);

    }

    /**
     * Fetch meta data about pstreams
     * Fetch meta data about pstreams
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;] (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param sort Sort the output based on given fields (optional)
     * @return TableReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public TableReportResponse getPstreams(String cfxqlQuery, String search, Integer offset, Integer limit, List<PstreamsEnum> sort) throws ApiException {
        ApiResponse<TableReportResponse> localVarResp = getPstreamsWithHttpInfo(cfxqlQuery, search, offset, limit, sort);
        return localVarResp.getData();
    }

    /**
     * Fetch meta data about pstreams
     * Fetch meta data about pstreams
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;] (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param sort Sort the output based on given fields (optional)
     * @return ApiResponse&lt;TableReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableReportResponse> getPstreamsWithHttpInfo(String cfxqlQuery, String search, Integer offset, Integer limit, List<PstreamsEnum> sort) throws ApiException {
        okhttp3.Call localVarCall = getPstreamsValidateBeforeCall(cfxqlQuery, search, offset, limit, sort, null);
        Type localVarReturnType = new TypeToken<TableReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch meta data about pstreams (asynchronously)
     * Fetch meta data about pstreams
     * @param cfxqlQuery &lt;a href&#x3D;&#39;https://bot-docs.cloudfabrix.io/reference_guides/cfxql/&#39;&gt;cfxql query&lt;/a&gt; string to filter the results (optional)
     * @param search search across fields: [&#39;name&#39;] (optional)
     * @param offset Offset to start the results from. (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @param sort Sort the output based on given fields (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPstreamsAsync(String cfxqlQuery, String search, Integer offset, Integer limit, List<PstreamsEnum> sort, final ApiCallback<TableReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPstreamsValidateBeforeCall(cfxqlQuery, search, offset, limit, sort, _callback);
        Type localVarReturnType = new TypeToken<TableReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
